package com.bolsadeideas.spring.boot.backend.apirest.repository;

import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.Date;

import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.bolsadeideas.spring.boot.backend.apirest.entity.Cliente;
import com.bolsadeideas.spring.boot.backend.apirest.entity.repository.ClienteRepository;

@SpringBootTest
@TestMethodOrder(OrderAnnotation.class)
class ClienteRepositoryIT 
{
	@Autowired
	ClienteRepository clienteRepository; 
	
//	@Test
//	@Order(1)
//	void debeCrearUnCliente() 
//	{
//		//Arrange(Arreglar los datos, Setearlos ....)
//		String nombre = "Juan Sebastian";
//		String apellido = "Bahamon Soto";
//		String email = "Sebastian@prueba.com";
//		Date createAt = new Date(11/01/2022);
//					
//		//Se hidrata el objeto para que se guarde en la BD.
//		Cliente cliente = new Cliente();
//		cliente.setNombre(nombre);
//		cliente.setApellido(apellido);
//		cliente.setEmail(email);
//		cliente.setCreateAt(createAt);
//				
//		//ACT (Probar el m√©todo)
//		cliente = clienteRepository.save(cliente);
//				
//		//Assert(Se afirma el resultado esperado.)
//		assertNotNull(cliente, "No fue posible crear el cliente");
//	}
	
	@Test
	@Order(1)
	void debeActualizarCliente()
	{
		//Arrange(Arreglar los datos, Setearlos ....)
		String nombreBusq = "Juan Sebastian";
		String apellidoBusq = "Bahamon";
				
		Cliente busqCliente = clienteRepository.findByNombreAndApellido(nombreBusq, apellidoBusq);
		
		String nombre = "Juan";
		String apellido = "Bahamon Soto";
		String email = "sebastianbahamon@prueba.com";
		Date createAt = new Date(2022,01,12);
		
		if(busqCliente != null)
		{
			busqCliente.setNombre(nombre);
			busqCliente.setApellido(apellido);
			busqCliente.setEmail(email);
			busqCliente.setCreateAt(createAt);
		}
		
		//ACT
		busqCliente = clienteRepository.save(busqCliente);
		
		//ASSERT
		assertNotNull(busqCliente, "EL cliente no registra en la base de datos");
	}

}
